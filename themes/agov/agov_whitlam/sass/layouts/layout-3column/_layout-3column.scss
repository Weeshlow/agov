// Dependencies.
@import 'zen-grids';

// Layout 3 Column
//
// Layout 3 Column
//
// Markup: layout-3column.hbs
//
// .layout-3col__full - 3-column wide grid item, starts a new row.
// .layout-3col__left-content - 2-column wide grid item, spanning columns 1 & 2, starts a new row.
// .layout-3col__right-content - 2-column wide grid item, spanning columns 2 & 3, starts a new row.
// .layout-3col__left-sidebar - 1-column wide grid item spanning column 1. Starts a new row on tablet screens.
// .layout-3col__right-sidebar - 1-column wide grid item spanning column 3. Starts a new row on tablet screens.
// .layout-3col__col-1 - 1-column wide grid item spanning column 1, starts a new row.
// .layout-3col__col-2 - 1-column wide grid item spanning column 2.
// .layout-3col__col-3 - 1-column wide grid item spanning column 3. Starts a new row on tablet screens.
// .layout-3col__col-4 Could we use this? - (At tablet sizes, the col-x grid items will form an irregular layout of 2 items in the first row and 1 item in the second row. We could add a "hidden" col-4 item that does not appear on the large-screen 3-column grid.) 1-column wide grid item spanning column 2 on tablet screens.
//
// Style guide: layouts.layout-3column

$zen-columns: 3;
$zen-gutters: 40px;

.layout-center
%layout-center {
  @include zen-grid-container();
}

.layout-3col,
%layout-3col {
  &__grid-item-container {
    //@include zen-clear();
  }

  &__full {
    //@include zen-clear();
    @include zen-grid-item(3, 1);
  }

  &__left-content {
    //@include zen-clear();
    @include zen-grid-item(2, 1);
  }

  &__right-content {
    //@include zen-clear();
    @include zen-grid-item(2, 2);
  }

  &__left-sidebar {
    @include zen-grid-item(1, 1);
  }

  &__right-sidebar {
    @include zen-grid-item(1, 3);
  }

  &__col-1 {
    //@include zen-clear();
    @include zen-grid-item(1, 1);
  }

  &__col-2 {
    @include zen-grid-item(1, 2);
  }

  &__col-3 {
    @include zen-grid-item(1, 3);
  }

  &__col-4 {

  }
}
